apply plugin: 'maven-publish'

// Publish
String publishFolderName = new String('publish')

// GitHub Packages Api Properties
String gprUser = new String()
String gprApiKey = new String()

Properties localProperties = new Properties()
String localPropertiesFileName = new String('local.properties')
def localPropertiesFile = file("$rootDir/$localPropertiesFileName")
boolean hasLocalProperties = localPropertiesFile.exists()

// If local.properties doesn't exist, then we get gprUser & gprApiKey from Bintray secrets.
if (hasLocalProperties) {
    localProperties.load(localPropertiesFile.newDataInputStream())
    gprUser = localProperties.getProperty("gpr.usr")
    gprApiKey = localProperties.getProperty("gpr.key")
} else {
    gprUser = System.getenv("GPR_USER")
    gprApiKey = System.getenv("GPR_API_KEY")
}

// Library Properties
Properties libraryProperties = new Properties()
String libraryPropertiesFileName = new String('library.properties')
libraryProperties.load(file("$rootDir/${project.name}/$libraryPropertiesFileName").newDataInputStream())

// Macaron Properties
Properties macaronProperties = new Properties()
String macaronPropertiesFileName = new String('macaron.properties')
macaronProperties.load(file("$rootDir/$publishFolderName/$macaronPropertiesFileName").newDataInputStream())

task checkProperties {
    if (hasLocalProperties) {
        throwMissingValueExceptionIfNeed(localProperties, localPropertiesFileName)
    }

    throwMissingValueExceptionIfNeed(macaronProperties, macaronPropertiesFileName)
    throwMissingValueExceptionIfNeed(libraryProperties, libraryPropertiesFileName)
}

private static def throwMissingValueExceptionIfNeed(propertyMap, fileName) {
    propertyMap.each { entry ->
        if (!entry.value) {
            throw new Exception("${entry.key} is empty in $fileName")
        }
    }
}

version = libraryProperties.getProperty('libraryVersion')
group = macaronProperties.getProperty('publishedGroupId')    // Maven Group ID for the artifact

publishing {
    publications {
        gpr(MavenPublication) {
            groupId macaronProperties.getProperty('publishedGroupId')
            artifactId libraryProperties.getProperty('artifact')
            artifact("$buildDir/outputs/aar/$artifactId-release.aar")

            version libraryProperties.getProperty('libraryVersion')
            description libraryProperties.getProperty('libraryDescription')

            pom {
                name = libraryProperties.getProperty('libraryName')
                packaging = 'aar'
                url = macaronProperties.getProperty('projectSiteUrl')

                withXml {
                    final dependenciesNode = asNode().appendNode('dependencies')
                    ext.addDependency = { Dependency dep, String scope ->
                        if (dep.group == null || dep.version == null || dep.name == null || dep.name == "unspecified")
                            return
                        final dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', dep.group)
                        dependencyNode.appendNode('artifactId', dep.name)
                        dependencyNode.appendNode('version', dep.version)
                        dependencyNode.appendNode('scope', scope)
                        if (!dep.transitive) {
                            final exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
                            exclusionNode.appendNode('groupId', '*')
                            exclusionNode.appendNode('artifactId', '*')
                        } else if (!dep.properties.excludeRules.empty) {
                            final exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
                            dep.properties.excludeRules.each { ExcludeRule rule ->
                                exclusionNode.appendNode('groupId', rule.group ?: '*')
                                exclusionNode.appendNode('artifactId', rule.module ?: '*')
                            }
                        }
                    }
                    configurations.compile.getDependencies().each { dep -> addDependency(dep, "compile") }
                    configurations.api.getDependencies().each { dep -> addDependency(dep, "compile") }
                    configurations.implementation.getDependencies().each { dep -> addDependency(dep, "runtime") }
                }
            }
        }
    }

    repositories {
        maven {
            name = macaronProperties.getProperty('gitHubRepoName')
            url = uri("https://maven.pkg.github.com/$gprUser/${macaronProperties.getProperty('gitHubRepoName')}")
            credentials {
                username = gprUser ?: System.getenv("GPR_USER")
                password = gprApiKey ?: System.getenv("GPR_API_KEY")
            }
        }
    }
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}
